// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozontech/seq-db/pkg/storeapi (interfaces: StoreApiClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storeapi "github.com/ozontech/seq-db/pkg/storeapi"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockStoreApiClient is a mock of StoreApiClient interface.
type MockStoreApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreApiClientMockRecorder
}

// MockStoreApiClientMockRecorder is the mock recorder for MockStoreApiClient.
type MockStoreApiClientMockRecorder struct {
	mock *MockStoreApiClient
}

// NewMockStoreApiClient creates a new mock instance.
func NewMockStoreApiClient(ctrl *gomock.Controller) *MockStoreApiClient {
	mock := &MockStoreApiClient{ctrl: ctrl}
	mock.recorder = &MockStoreApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreApiClient) EXPECT() *MockStoreApiClientMockRecorder {
	return m.recorder
}

// Bulk mocks base method.
func (m *MockStoreApiClient) Bulk(arg0 context.Context, arg1 *storeapi.BulkRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bulk", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bulk indicates an expected call of Bulk.
func (mr *MockStoreApiClientMockRecorder) Bulk(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bulk", reflect.TypeOf((*MockStoreApiClient)(nil).Bulk), varargs...)
}

// Fetch mocks base method.
func (m *MockStoreApiClient) Fetch(arg0 context.Context, arg1 *storeapi.FetchRequest, arg2 ...grpc.CallOption) (storeapi.StoreApi_FetchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(storeapi.StoreApi_FetchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockStoreApiClientMockRecorder) Fetch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockStoreApiClient)(nil).Fetch), varargs...)
}

// Search mocks base method.
func (m *MockStoreApiClient) Search(arg0 context.Context, arg1 *storeapi.SearchRequest, arg2 ...grpc.CallOption) (*storeapi.SearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*storeapi.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockStoreApiClientMockRecorder) Search(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockStoreApiClient)(nil).Search), varargs...)
}

// Status mocks base method.
func (m *MockStoreApiClient) Status(arg0 context.Context, arg1 *storeapi.StatusRequest, arg2 ...grpc.CallOption) (*storeapi.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*storeapi.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockStoreApiClientMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockStoreApiClient)(nil).Status), varargs...)
}
